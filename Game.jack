

class Game {
   field int delay;

   field Player player;
   field Pipe pipe1;
   field Pipe pipe2;
   field Pipe pipe3;
   field Score score;
   field char key;      
   field char last_key;
   field boolean first_jump;
   field boolean exit;
   field boolean reset;
   field boolean quit;
   field boolean is_hard_difficulty;
   field boolean is_difficulty_set;
   field int pipe_interaction;
   field int frames1;
   field String youWonText;
   field String youLostText;
   field String scoreText;
   field String difficultyText;
   field String pressSpaceOrQText;
   field String selectDesiredDifficultyText;
   field String hardDifficultyText;
   field String easyDifficultyText;
   field String titleText;
   field String pressSpaceText;

   constructor Game new() {
      
      // initialize (allocate) objects
      let player = Player.new(8, 128);
      let pipe1 = Pipe.new(614+((560/3)*0), 128);
      let pipe2 = Pipe.new(614+((560/3)*1), 128);
      let pipe3 = Pipe.new(614+((560/3)*2), 128);
      let is_hard_difficulty = false;
      let is_difficulty_set = false;

      let youWonText = "YOU WON!!";
      let youLostText = "YOU LOST :(";
      let scoreText = "Score:";
      let pressSpaceOrQText = "Press 'SPACE' to play again or 'Q' to quit";
      let selectDesiredDifficultyText = "Press the number under the desired difficulty";
      let hardDifficultyText = "HARD";
      let easyDifficultyText = "EASY";
      let titleText = "2D Side-scroller";
      let pressSpaceText = "Press 'SPACE' to play";
      

      return this;
   }

   method void dispose() {
      // dispose of (deallocate) objects
      do player.dispose();
      do pipe1.dispose();
      do pipe2.dispose();
      do pipe3.dispose();
      do score.dispose();
      do Memory.deAlloc(this);
      return;
   }

   // handle game logic (keyboard input)
   method void handle_input() {
      let key = Keyboard.keyPressed();
      //
      if (key = 81) { // Q
         let exit = true; 
         let quit = true;
      }
      if ((key = 32) & (~(last_key = 32))) { // space, ako jos nije pokrenuta igra
         do player.jump();
         if (first_jump) {
            // first jump (spacebar click) starts the game
            let first_jump = false;
            // replace title and delete instruction messages
            do LCGRandom.setSeed(frames1); //za random
            do Screen.setColor(false);
            do Screen.drawRectangle(160,76,350,100);
         }
      }
	  
      let last_key = key;
      return;
   }

   // handler for pipe interactions
   method void handle_pipe(int pipe_interaction) {
      if (pipe_interaction = 2) { // Collision
         let exit = true;
      } else {
         if (pipe_interaction=1) { // Passing by
            do score.increment();
            do score.display();
            if (score.getCurrent() = 10) {
               let exit = true;
            }
         }
      }
      return;
   }

   // update all active objects every frame
   method void refresh() {
      // update player animation
      do player.update();

      do Output.moveCursor(10, 28);
      
     
      if ((~first_jump)) { 
         // update pipes (they are moved every frame)
         do pipe1.update();
         do pipe2.update();
         do pipe3.update();
         // redraw score counter
         do score.display();
         // handle player-pipe colision (everyone moves/updates every frame)
         do handle_pipe(pipe1.is_player_inside_me(player.x(),player.y()));
         do handle_pipe(pipe2.is_player_inside_me(player.x(),player.y()));
         do handle_pipe(pipe3.is_player_inside_me(player.x(),player.y()));
      }
      return;
   }


   // the main game control
   method boolean run() {
      // init all variables
      let key = 0;
      let last_key = 0;
      let exit = false;
      let reset = false;
      let quit = false;
      let frames1 = 0;

      if(~is_difficulty_set) {
         // draw the introductory messages
         do handleDifficultyScreenLogic();

         if (is_hard_difficulty) {
            do Pipe.init(4, 50);
            let difficultyText = "Difficulty: Hard";
         }
         else {
            do Pipe.init(2, 50);
            let difficultyText = "Difficulty: Easy";
         }

         do handleStartScreenLogic();
         let score = Score.new(is_hard_difficulty);
      }

      // enter the play loop
      while (~exit) {
         // game logic and render
         do handle_input();
         do refresh();
         
         do Sys.wait(delay);
      }

      do Sys.wait(200);

      // wait to confirm reset, or to quit
      if(~reset) {
         let key = 0;

         do drawGameEndScreen();

         // while the pressed key is not 'Q' or 'SPACE' loop
         while (~(key = 81) & ~(key = 32)) {
            let key = Keyboard.keyPressed();
         }

         if (key = 81) {
            return false;
         }
      }
       
      do reset();  
      return true;
   }

   // recycle already allocated objects upon restart
   method void reset() {
      do Screen.clearScreen();
      do pipe1.reset(614+((560/3)*0), 128);
      do pipe2.reset(614+((560/3)*1), 128);
      do pipe3.reset(614+((560/3)*2), 128);
      do score.reset();
      let is_difficulty_set = true;
      let first_jump = true;
      return;
   }

   method void drawGameEndScreen() {	
      var int finalScore;
      let finalScore = score.getCurrent();

      do Screen.clearScreen();

	   //frame
      do Screen.drawRectangle(0,0,511,7);
      do Screen.drawRectangle(0,8,7,255);
      do Screen.drawRectangle(503,8,511,255);
      do Screen.drawRectangle(8,247,502,255);

      do Output.moveCursor(7, 27);

      if(finalScore = 10) {
         do Output.printString(youWonText);
      }
      else {
         do Output.printString(youLostText);
      }

      do Output.moveCursor(10, 28);
      do Output.printString(scoreText);
      do Output.moveCursor(10, 35);
      do Output.printInt(finalScore);
		
      //difficulty
		do Output.moveCursor(12, 25);
      do Output.printString(difficultyText);

      do Output.moveCursor(20, 11);
      do Output.printString(pressSpaceOrQText);

	   return;
   }

   method void handleStartScreenLogic() {
      do drawStartScreen();

      let is_difficulty_set = false;

      while (~first_jump) {
         do handleStartScreenInput();
      }

      do Screen.clearScreen();
      return;
   }

   method void handleStartScreenInput() {
      let key = Keyboard.keyPressed();

      if (key = 32) { // Space
         let first_jump = true;
      }

      return;
   }

   method void handleDifficultyScreenLogic() {
      do drawSelectDifficultyScreen();

      let is_difficulty_set = false;

      while (~is_difficulty_set) {
         do handleDifficultyInput();
      }

      do Screen.clearScreen();
      return;
   }

   // handle difficulty input
   method void handleDifficultyInput() {
      var int key;
      let key = Keyboard.keyPressed();

      if (key = 49) { // 1
         let is_hard_difficulty = false;
         let is_difficulty_set = true;
      }
      if (key = 50) { // 2
         let is_hard_difficulty = true;
         let is_difficulty_set = true;
      }

      return;
   }

   method void drawSelectDifficultyScreen(){
      do Output.moveCursor(7, 10);
      do Output.printString(selectDesiredDifficultyText);

	   //frame
      do Screen.drawRectangle(0,0,511,7);
      do Screen.drawRectangle(0,8,7,255);
      do Screen.drawRectangle(503,8,511,255);
      do Screen.drawRectangle(8,247,502,255);
		
      //easy difficulty
		do Output.moveCursor(12, 22);
      do Output.printString(easyDifficultyText);
      do Output.moveCursor(14, 22);
      do Output.printInt(1);

      //hard difficulty
      do Output.moveCursor(12, 35);
      do Output.printString(hardDifficultyText);
      do Output.moveCursor(14, 35);
      do Output.printInt(2);
	   return;
   }

   method void drawStartScreen(){
      //frame
      do Screen.drawRectangle(0,0,511,7);
      do Screen.drawRectangle(0,8,7,255);
      do Screen.drawRectangle(503,8,511,255);
      do Screen.drawRectangle(8,247,502,255);

      do Output.moveCursor(4, 24);
      do Output.printString(difficultyText);
	
      do Output.moveCursor(7, 23);
      do Output.printString(titleText);
	
      // start
      // s
      do Screen.drawRectangle(190,110,204,114);
      do Screen.drawRectangle(185,115,189,129);
      do Screen.drawRectangle(205,115,209,119);
      do Screen.drawRectangle(190,130,194,134);
      do Screen.drawRectangle(195,135,204,139);
      do Screen.drawRectangle(205,140,209,154);
      do Screen.drawRectangle(185,150,189,154);
      do Screen.drawRectangle(190,155,204,159);
      //t
      do Screen.drawRectangle(210,110,234,114);
      do Screen.drawRectangle(220,115,224,159);
      //a
      do Screen.drawRectangle(250,110,255,114);
      do Screen.drawRectangle(245,115,250,129);
      do Screen.drawRectangle(255,115,260,129);
      do Screen.drawRectangle(240,130,245,159);
      do Screen.drawRectangle(260,130,265,159);
      do Screen.drawRectangle(245,140,260,144);
      //r
      do Screen.drawRectangle(270,110,274,159);
      do Screen.drawRectangle(275,110,289,114);
      do Screen.drawRectangle(290,115,294,129);
      do Screen.drawRectangle(275,130,289,134);
      do Screen.drawRectangle(275,135,279,139);
      do Screen.drawRectangle(280,140,284,144);
      do Screen.drawRectangle(285,145,289,149);
      do Screen.drawRectangle(290,150,294,159);
      //t
      do Screen.drawRectangle(300,110,324,114);
      do Screen.drawRectangle(310,115,314,159);
		
		do Output.moveCursor(16, 22);
      do Output.printString(pressSpaceText);
	   return;
   }
}